[{
  "sno.": 1,
  "topic": "Array",
  "problem": "Reverse the array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 2,
  "topic": "Array",
  "problem": "Find the maximum and minimum element in an array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 3,
  "topic": "Array",
  "problem": "Find the \"Kth\" max and min element of an array ",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 4,
  "topic": "Array",
  "problem": "Given an array which consists of only 0, 1 and 2. Sort the array without using any sorting algo",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 5,
  "topic": "Array",
  "problem": "Move all the negative elements to one side of the array ",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 6,
  "topic": "Array",
  "problem": "Find the Union and Intersection of the two sorted arrays.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 7,
  "topic": "Array",
  "problem": "Write a program to cyclically rotate an array by one.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 8,
  "topic": "Array",
  "problem": "find Largest sum contiguous Subarray [V. IMP]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 9,
  "topic": "Array",
  "problem": "Minimise the maximum difference between heights [V.IMP]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 10,
  "topic": "Array",
  "problem": "Minimum no. of Jumps to reach end of an array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 11,
  "topic": "Array",
  "problem": "find duplicate in an array of N+1 Integers",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 12,
  "topic": "Array",
  "problem": "Merge 2 sorted arrays without using Extra space.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 13,
  "topic": "Array",
  "problem": "Kadane's Algo [V.V.V.V.V IMP]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 14,
  "topic": "Array",
  "problem": "Merge Intervals",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 15,
  "topic": "Array",
  "problem": "Next Permutation",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 16,
  "topic": "Array",
  "problem": "Count Inversion",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 17,
  "topic": "Array",
  "problem": "Best time to buy and Sell stock",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 18,
  "topic": "Array",
  "problem": "find all pairs on integer array whose sum is equal to given number",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 19,
  "topic": "Array",
  "problem": "find common elements In 3 sorted arrays",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 20,
  "topic": "Array",
  "problem": "Rearrange the array in alternating positive and negative items with O(1) extra space",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 21,
  "topic": "Array",
  "problem": "Find if there is any subarray with sum equal to 0",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 22,
  "topic": "Array",
  "problem": "Find factorial of a large number",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 23,
  "topic": "Array",
  "problem": "find maximum product subarray ",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 24,
  "topic": "Array",
  "problem": "Find longest coinsecutive subsequence",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 25,
  "topic": "Array",
  "problem": "Given an array of size n and a number k, fin all elements that appear more than \" n/k \" times.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 26,
  "topic": "Array",
  "problem": "Maximum profit by buying and selling a share atmost twice",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 27,
  "topic": "Array",
  "problem": "Find whether an array is a subset of another array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 28,
  "topic": "Array",
  "problem": "Find the triplet that sum to a given value",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 29,
  "topic": "Array",
  "problem": "Trapping Rain water problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 30,
  "topic": "Array",
  "problem": "Chocolate Distribution problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 31,
  "topic": "Array",
  "problem": "Smallest Subarray with sum greater than a given value",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 32,
  "topic": "Array",
  "problem": "Three way partitioning of an array around a given value",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 33,
  "topic": "Array",
  "problem": "Minimum swaps required bring elements less equal K together",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 34,
  "topic": "Array",
  "problem": "Minimum no. of operations required to make an array palindrome",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 35,
  "topic": "Array",
  "problem": "Median of 2 sorted arrays of equal size",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 36,
  "topic": "Array",
  "problem": "Median of 2 sorted arrays of different size",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},


{
  "sno.": 37,
  "topic": "Matrix",
  "problem": "Spiral traversal on a Matrix",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 38,
  "topic": "Matrix",
  "problem": "Search an element in a matriix",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 39,
  "topic": "Matrix",
  "problem": "Find median in a row wise sorted matrix",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 40,
  "topic": "Matrix",
  "problem": "Find row with maximum no. of 1's",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 41,
  "topic": "Matrix",
  "problem": "Print elements in sorted order using row-column wise sorted matrix",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 42,
  "topic": "Matrix",
  "problem": "Maximum size rectangle",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 43,
  "topic": "Matrix",
  "problem": "Find a specific pair in matrix",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 44,
  "topic": "Matrix",
  "problem": "Rotate matrix by 90 degrees",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 45,
  "topic": "Matrix",
  "problem": "Kth smallest element in a row-cpumn wise sorted matrix",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 46,
  "topic": "Matrix",
  "problem": "Common elements in all rows of a given matrix",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},


{
  "sno.": 47,
  "topic": "String",
  "problem": "Reverse a String",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 48,
  "topic": "String",
  "problem": "Check whether a String is Palindrome or not",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 49,
  "topic": "String",
  "problem": "Find Duplicate characters in a string",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 50,
  "topic": "String",
  "problem": "Why strings are immutable in Java?",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 51,
  "topic": "String",
  "problem": "Write a Code to check whether one string is a rotation of another",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 52,
  "topic": "String",
  "problem": "Write a Program to check whether a string is a valid shuffle of two strings or not",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 53,
  "topic": "String",
  "problem": "Count and Say problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 54,
  "topic": "String",
  "problem": "Write a program to find the longest Palindrome in a string.[ Longest palindromic Substring]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 55,
  "topic": "String",
  "problem": "Find Longest Recurring Subsequence in String",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 56,
  "topic": "String",
  "problem": "Print all Subsequences of a string.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 57,
  "topic": "String",
  "problem": "Print all the permutations of the given string",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 58,
  "topic": "String",
  "problem": "Split the Binary string into two substring with equal 0’s and 1’s",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 59,
  "topic": "String",
  "problem": "Word Wrap Problem [VERY IMP].",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 60,
  "topic": "String",
  "problem": "EDIT Distance [Very Imp]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 61,
  "topic": "String",
  "problem": "Find next greater number with same set of digits. [Very Very IMP]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 62,
  "topic": "String",
  "problem": "Balanced Parenthesis problem.[Imp]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 63,
  "topic": "String",
  "problem": "Word break Problem[ Very Imp]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 64,
  "topic": "String",
  "problem": "Rabin Karp Algo",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 65,
  "topic": "String",
  "problem": "KMP Algo",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 66,
  "topic": "String",
  "problem": "Convert a Sentence into its equivalent mobile numeric keypad sequence.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 67,
  "topic": "String",
  "problem": "Minimum number of bracket reversals needed to make an expression balanced.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 68,
  "topic": "String",
  "problem": "Count All Palindromic Subsequence in a given String.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 69,
  "topic": "String",
  "problem": "Count of number of given string in 2D character array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 70,
  "topic": "String",
  "problem": "Search a Word in a 2D Grid of characters.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 71,
  "topic": "String",
  "problem": "Boyer Moore Algorithm for Pattern Searching.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 72,
  "topic": "String",
  "problem": "Converting Roman Numerals to Decimal",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 73,
  "topic": "String",
  "problem": "Longest Common Prefix",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 74,
  "topic": "String",
  "problem": "Number of flips to make binary string alternate",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 75,
  "topic": "String",
  "problem": "Find the first repeated word in string.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 76,
  "topic": "String",
  "problem": "Minimum number of swaps for bracket balancing.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 77,
  "topic": "String",
  "problem": "Find the longest common subsequence between two strings.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 78,
  "topic": "String",
  "problem": "Program to generate all possible valid IP addresses from given  string.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 79,
  "topic": "String",
  "problem": "Write a program tofind the smallest window that contains all characters of string itself.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 80,
  "topic": "String",
  "problem": "Rearrange characters in a string such that no two adjacent are same",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 81,
  "topic": "String",
  "problem": "Minimum characters to be added at front to make string palindrome",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 82,
  "topic": "String",
  "problem": "Given a sequence of words, print all anagrams together",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 83,
  "topic": "String",
  "problem": "Find the smallest window in a string containing all characters of another string",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 84,
  "topic": "String",
  "problem": "Recursively remove all adjacent duplicates",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 85,
  "topic": "String",
  "problem": "String matching where one string contains wildcard characters",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 86,
  "topic": "String",
  "problem": "Function to find Number of customers who could not get a computer",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 87,
  "topic": "String",
  "problem": "Transform One String to Another using Minimum Number of Given Operation",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 88,
  "topic": "String",
  "problem": "Check if two given strings are isomorphic to each other",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 89,
  "topic": "String",
  "problem": "Recursively print all sentences that can be formed from list of word lists",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},


{
  "sno.": 90,
  "topic": "Searching & Sorting",
  "problem": "Find first and last positions of an element in a sorted array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 91,
  "topic": "Searching & Sorting",
  "problem": "Find a Fixed Point (Value equal to index) in a given array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 92,
  "topic": "Searching & Sorting",
  "problem": "Search in a rotated sorted array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 93,
  "topic": "Searching & Sorting",
  "problem": "square root of an integer",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 94,
  "topic": "Searching & Sorting",
  "problem": "Maximum and minimum of an array using minimum number of comparisons",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 95,
  "topic": "Searching & Sorting",
  "problem": "Optimum location of point to minimize total distance",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 96,
  "topic": "Searching & Sorting",
  "problem": "Find the repeating and the missing",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 97,
  "topic": "Searching & Sorting",
  "problem": "find majority element",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 98,
  "topic": "Searching & Sorting",
  "problem": "Searching in an array where adjacent differ by at most k",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 99,
  "topic": "Searching & Sorting",
  "problem": "find a pair with a given difference",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 100,
  "topic": "Searching & Sorting",
  "problem": "find four elements that sum to a given value",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 101,
  "topic": "Searching & Sorting",
  "problem": "maximum sum such that no 2 elements are adjacent",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 102,
  "topic": "Searching & Sorting",
  "problem": "Count triplet with sum smaller than a given value",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 103,
  "topic": "Searching & Sorting",
  "problem": "merge 2 sorted arrays",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 104,
  "topic": "Searching & Sorting",
  "problem": "print all subarrays with 0 sum",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 105,
  "topic": "Searching & Sorting",
  "problem": "Product array Puzzle",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 106,
  "topic": "Searching & Sorting",
  "problem": "Sort array according to count of set bits",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 107,
  "topic": "Searching & Sorting",
  "problem": "minimum no. of swaps required to sort the array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 108,
  "topic": "Searching & Sorting",
  "problem": "Bishu and Soldiers",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 109,
  "topic": "Searching & Sorting",
  "problem": "Rasta and Kheshtak",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 110,
  "topic": "Searching & Sorting",
  "problem": "Kth smallest number again",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 111,
  "topic": "Searching & Sorting",
  "problem": "Find pivot element in a sorted array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 112,
  "topic": "Searching & Sorting",
  "problem": "K-th Element of Two Sorted Arrays",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 113,
  "topic": "Searching & Sorting",
  "problem": "Aggressive cows",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 114,
  "topic": "Searching & Sorting",
  "problem": "Book Allocation Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 115,
  "topic": "Searching & Sorting",
  "problem": "EKOSPOJ:",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 116,
  "topic": "Searching & Sorting",
  "problem": "Job Scheduling Algo",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 117,
  "topic": "Searching & Sorting",
  "problem": "Missing Number in AP",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 118,
  "topic": "Searching & Sorting",
  "problem": "Smallest number with atleastn trailing zeroes infactorial",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 119,
  "topic": "Searching & Sorting",
  "problem": "Painters Partition Problem:",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 120,
  "topic": "Searching & Sorting",
  "problem": "ROTI-Prata SPOJ",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 121,
  "topic": "Searching & Sorting",
  "problem": "DoubleHelix SPOJ",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 122,
  "topic": "Searching & Sorting",
  "problem": "Subset Sums",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 123,
  "topic": "Searching & Sorting",
  "problem": "Findthe inversion count",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 124,
  "topic": "Searching & Sorting",
  "problem": "Implement Merge-sort in-place",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 125,
  "topic": "Searching & Sorting",
  "problem": "Partitioning and Sorting Arrays with Many Repeated Entries",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},


{
  "sno.": 126,
  "topic": "LinkedList",
  "problem": "Write a Program to reverse the Linked List. (Both Iterative and recursive)",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 127,
  "topic": "LinkedList",
  "problem": "Reverse a Linked List in group of Given Size. [Very Imp]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 128,
  "topic": "LinkedList",
  "problem": "Write a program to Detect loop in a linked list.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 129,
  "topic": "LinkedList",
  "problem": "Write a program to Delete loop in a linked list.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 130,
  "topic": "LinkedList",
  "problem": "Find the starting point of the loop. ",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 131,
  "topic": "LinkedList",
  "problem": "Remove Duplicates in a sorted Linked List.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 132,
  "topic": "LinkedList",
  "problem": "Remove Duplicates in a Un-sorted Linked List.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 133,
  "topic": "LinkedList",
  "problem": "Write a Program to Move the last element to Front in a Linked List.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 134,
  "topic": "LinkedList",
  "problem": "Add “1” to a number represented as a Linked List.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 135,
  "topic": "LinkedList",
  "problem": "Add two numbers represented by linked lists.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 136,
  "topic": "LinkedList",
  "problem": "Intersection of two Sorted Linked List.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 137,
  "topic": "LinkedList",
  "problem": "Intersection Point of two Linked Lists.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 138,
  "topic": "LinkedList",
  "problem": "Merge Sort For Linked lists.[Very Important]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 139,
  "topic": "LinkedList",
  "problem": "Quicksort for Linked Lists.[Very Important]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 140,
  "topic": "LinkedList",
  "problem": "Find the middle Element of a linked list.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 141,
  "topic": "LinkedList",
  "problem": "Check if a linked list is a circular linked list.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 142,
  "topic": "LinkedList",
  "problem": "Split a Circular linked list into two halves.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 143,
  "topic": "LinkedList",
  "problem": "Write a Program to check whether the Singly Linked list is a palindrome or not.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 144,
  "topic": "LinkedList",
  "problem": "Deletion from a Circular Linked List.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 145,
  "topic": "LinkedList",
  "problem": "Reverse a Doubly Linked list.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 146,
  "topic": "LinkedList",
  "problem": "Find pairs with a given sum in a DLL.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 147,
  "topic": "LinkedList",
  "problem": "Count triplets in a sorted DLL whose sum is equal to given value “X”.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 148,
  "topic": "LinkedList",
  "problem": "Sort a “k”sorted Doubly Linked list.[Very IMP]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 149,
  "topic": "LinkedList",
  "problem": "Rotate DoublyLinked list by N nodes.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 150,
  "topic": "LinkedList",
  "problem": "Rotate a Doubly Linked list in group of Given Size.[Very IMP]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 151,
  "topic": "LinkedList",
  "problem": "Can we reverse a linked list in less than O(n) ?",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 152,
  "topic": "LinkedList",
  "problem": "Why Quicksort is preferred for. Arrays and Merge Sort for LinkedLists ?",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 153,
  "topic": "LinkedList",
  "problem": "Flatten a Linked List",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 154,
  "topic": "LinkedList",
  "problem": "Sort a LL of 0's, 1's and 2's",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 155,
  "topic": "LinkedList",
  "problem": "Clone a linked list with next and random pointer",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 156,
  "topic": "LinkedList",
  "problem": "Merge K sorted Linked list",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 157,
  "topic": "LinkedList",
  "problem": "Multiply 2 no. represented by LL",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 158,
  "topic": "LinkedList",
  "problem": "Delete nodes which have a greater value on right side",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 159,
  "topic": "LinkedList",
  "problem": "Segregate even and odd nodes in a Linked List",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 160,
  "topic": "LinkedList",
  "problem": "Program for n’th node from the end of a Linked List",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 161,
  "topic": "LinkedList",
  "problem": "Find the first non-repeating character from a stream of characters",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},


{
  "sno.": 162,
  "topic": "Binary Trees",
  "problem": "level order traversal",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 163,
  "topic": "Binary Trees",
  "problem": "Reverse Level Order traversal",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 164,
  "topic": "Binary Trees",
  "problem": "Height of a tree",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 165,
  "topic": "Binary Trees",
  "problem": "Diameter of a tree",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 166,
  "topic": "Binary Trees",
  "problem": "Mirror of a tree",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 167,
  "topic": "Binary Trees",
  "problem": "Inorder Traversal of a tree both using recursion and Iteration",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 168,
  "topic": "Binary Trees",
  "problem": "Preorder Traversal of a tree both using recursion and Iteration",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 169,
  "topic": "Binary Trees",
  "problem": "Postorder Traversal of a tree both using recursion and Iteration",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 170,
  "topic": "Binary Trees",
  "problem": "Left View of a tree",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 171,
  "topic": "Binary Trees",
  "problem": "Right View of Tree",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 172,
  "topic": "Binary Trees",
  "problem": "Top View of a tree",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 173,
  "topic": "Binary Trees",
  "problem": "Bottom View of a tree",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 174,
  "topic": "Binary Trees",
  "problem": "Zig-Zag traversal of a binary tree",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 175,
  "topic": "Binary Trees",
  "problem": "Check if a tree is balanced or not",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 176,
  "topic": "Binary Trees",
  "problem": "Diagnol Traversal of a Binary tree",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 177,
  "topic": "Binary Trees",
  "problem": "Boundary traversal of a Binary tree",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 178,
  "topic": "Binary Trees",
  "problem": "Construct Binary Tree from String with Bracket Representation",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 179,
  "topic": "Binary Trees",
  "problem": "Convert Binary tree into Doubly Linked List",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 180,
  "topic": "Binary Trees",
  "problem": "Convert Binary tree into Sum tree",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 181,
  "topic": "Binary Trees",
  "problem": "Construct Binary tree from Inorder and preorder traversal",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 182,
  "topic": "Binary Trees",
  "problem": "Find minimum swaps required to convert a Binary tree into BST",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 183,
  "topic": "Binary Trees",
  "problem": "Check if Binary tree is Sum tree or not",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 184,
  "topic": "Binary Trees",
  "problem": "Check if all leaf nodes are at same level or not",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 185,
  "topic": "Binary Trees",
  "problem": "Check if a Binary Tree contains duplicate subtrees of size 2 or more [ IMP ]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 186,
  "topic": "Binary Trees",
  "problem": "Check if 2 trees are mirror or not",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 187,
  "topic": "Binary Trees",
  "problem": "Sum of Nodes on the Longest path from root to leaf node ",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 188,
  "topic": "Binary Trees",
  "problem": "Check if given graph is tree or not.  [ IMP ]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 189,
  "topic": "Binary Trees",
  "problem": "Find Largest subtree sum in a tree",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 190,
  "topic": "Binary Trees",
  "problem": "Maximum Sum of nodes in Binary tree such that no two are adjacent ",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 191,
  "topic": "Binary Trees",
  "problem": "Print all \"K\" Sum paths in a Binary tree",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 192,
  "topic": "Binary Trees",
  "problem": "Find LCA in a Binary tree",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 193,
  "topic": "Binary Trees",
  "problem": "Find distance between 2 nodes in a Binary tree",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 194,
  "topic": "Binary Trees",
  "problem": "Kth Ancestor of node in a Binary tree",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 195,
  "topic": "Binary Trees",
  "problem": "Find all Duplicate subtrees in a Binary tree [ IMP ]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 196,
  "topic": "Binary Trees",
  "problem": "Tree Isomorphism Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},


{
  "sno.": 197,
  "topic": "Binary Search Trees",
  "problem": "Fina a value in a BST",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 198,
  "topic": "Binary Search Trees",
  "problem": "Deletion of a node in a BST",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 199,
  "topic": "Binary Search Trees",
  "problem": "Find min and max value in a BST",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 200,
  "topic": "Binary Search Trees",
  "problem": "Find inorder successor and inorder predecessor in a BST",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 201,
  "topic": "Binary Search Trees",
  "problem": "Check if a tree is a BST or not ",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 202,
  "topic": "Binary Search Trees",
  "problem": "Populate Inorder successor of all nodes",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 203,
  "topic": "Binary Search Trees",
  "problem": "Find LCA  of 2 nodes in a BST",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 204,
  "topic": "Binary Search Trees",
  "problem": "Construct BST from preorder traversal",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 205,
  "topic": "Binary Search Trees",
  "problem": "Convert Binary tree into BST",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 206,
  "topic": "Binary Search Trees",
  "problem": "Convert a normal BST into a Balanced BST",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 207,
  "topic": "Binary Search Trees",
  "problem": "Merge two BST [ V.V.V>IMP ]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 208,
  "topic": "Binary Search Trees",
  "problem": "Find Kth largest element in a BST",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 209,
  "topic": "Binary Search Trees",
  "problem": "Find Kth smallest element in a BST",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 210,
  "topic": "Binary Search Trees",
  "problem": "Count pairs from 2 BST whose sum is equal to given value \"X\"",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 211,
  "topic": "Binary Search Trees",
  "problem": "Find the median of BST in O(n) time and O(1) space",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 212,
  "topic": "Binary Search Trees",
  "problem": "Count BST ndoes that lie in a given range",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 213,
  "topic": "Binary Search Trees",
  "problem": "Replace every element with the least greater element on its right",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 214,
  "topic": "Binary Search Trees",
  "problem": "Given \"n\" appointments, find the conflicting appointments",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 215,
  "topic": "Binary Search Trees",
  "problem": "Check preorder is valid or not",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 216,
  "topic": "Binary Search Trees",
  "problem": "Check whether BST contains Dead end",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 217,
  "topic": "Binary Search Trees",
  "problem": "Largest BST in a Binary Tree [ V.V.V.V.V IMP ]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 218,
  "topic": "Binary Search Trees",
  "problem": "Flatten BST to sorted list",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},


{
  "sno.": 219,
  "topic": "Greedy",
  "problem": "Activity Selection Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 220,
  "topic": "Greedy",
  "problem": "Job SequencingProblem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 221,
  "topic": "Greedy",
  "problem": "Huffman Coding",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 222,
  "topic": "Greedy",
  "problem": "Water Connection Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 223,
  "topic": "Greedy",
  "problem": "Fractional Knapsack Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 224,
  "topic": "Greedy",
  "problem": "Greedy Algorithm to find Minimum number of Coins",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 225,
  "topic": "Greedy",
  "problem": "Maximum trains for which stoppage can be provided",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 226,
  "topic": "Greedy",
  "problem": "Minimum Platforms Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 227,
  "topic": "Greedy",
  "problem": "Buy Maximum Stocks if i stocks can be bought on i-th day",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 228,
  "topic": "Greedy",
  "problem": "Find the minimum and maximum amount to buy all N candies",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 229,
  "topic": "Greedy",
  "problem": "Minimize Cash Flow among a given set of friends who have borrowed money from each other",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 230,
  "topic": "Greedy",
  "problem": "Minimum Cost to cut a board into squares",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 231,
  "topic": "Greedy",
  "problem": "Check if it is possible to survive on Island",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 232,
  "topic": "Greedy",
  "problem": "Find maximum meetings in one room",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 233,
  "topic": "Greedy",
  "problem": "Maximum product subset of an array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 234,
  "topic": "Greedy",
  "problem": "Maximize array sum after K negations",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 235,
  "topic": "Greedy",
  "problem": "Maximize the sum of arr[i]*i",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 236,
  "topic": "Greedy",
  "problem": "Maximum sum of absolute difference of an array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 237,
  "topic": "Greedy",
  "problem": "Maximize sum of consecutive differences in a circular array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 238,
  "topic": "Greedy",
  "problem": "Minimum sum of absolute difference of pairs of two arrays",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 239,
  "topic": "Greedy",
  "problem": "Program for Shortest Job First (or SJF) CPU Scheduling",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 240,
  "topic": "Greedy",
  "problem": "Program for Least Recently Used (LRU) Page Replacement algorithm",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 241,
  "topic": "Greedy",
  "problem": "Smallest subset with sum greater than all other elements",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 242,
  "topic": "Greedy",
  "problem": "Chocolate Distribution Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 243,
  "topic": "Greedy",
  "problem": "DEFKIN -Defense of a Kingdom",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 244,
  "topic": "Greedy",
  "problem": "DIEHARD -DIE HARD",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 245,
  "topic": "Greedy",
  "problem": "GERGOVIA -Wine trading in Gergovia",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 246,
  "topic": "Greedy",
  "problem": "Picking Up Chicks",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 247,
  "topic": "Greedy",
  "problem": "CHOCOLA –Chocolate",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 248,
  "topic": "Greedy",
  "problem": "ARRANGE -Arranging Amplifiers",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 249,
  "topic": "Greedy",
  "problem": "K Centers Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 250,
  "topic": "Greedy",
  "problem": "Minimum Cost of ropes",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 251,
  "topic": "Greedy",
  "problem": "Find smallest number with given number of digits and sum of digits",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 252,
  "topic": "Greedy",
  "problem": "Rearrange characters in a string such that no two adjacent are same",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 253,
  "topic": "Greedy",
  "problem": "Find maximum sum possible equal sum of three stacks",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},


{
  "sno.": 254,
  "topic": "BackTracking",
  "problem": "Rat in a maze Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 255,
  "topic": "BackTracking",
  "problem": "Printing all solutions in N-Queen Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 256,
  "topic": "BackTracking",
  "problem": "Word Break Problem using Backtracking",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 257,
  "topic": "BackTracking",
  "problem": "Remove Invalid Parentheses",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 258,
  "topic": "BackTracking",
  "problem": "Sudoku Solver",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 259,
  "topic": "BackTracking",
  "problem": "m Coloring Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 260,
  "topic": "BackTracking",
  "problem": "Print all palindromic partitions of a string",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 261,
  "topic": "BackTracking",
  "problem": "Subset Sum Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 262,
  "topic": "BackTracking",
  "problem": "The Knight’s tour problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 263,
  "topic": "BackTracking",
  "problem": "Tug of War",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 264,
  "topic": "BackTracking",
  "problem": "Find shortest safe route in a path with landmines",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 265,
  "topic": "BackTracking",
  "problem": "Combinational Sum",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 266,
  "topic": "BackTracking",
  "problem": "Find Maximum number possible by doing at-most K swaps",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 267,
  "topic": "BackTracking",
  "problem": "Print all permutations of a string ",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 268,
  "topic": "BackTracking",
  "problem": "Find if there is a path of more than k length from a source",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 269,
  "topic": "BackTracking",
  "problem": "Longest Possible Route in a Matrix with Hurdles",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 270,
  "topic": "BackTracking",
  "problem": "Print all possible paths from top left to bottom right of a mXn matrix",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 271,
  "topic": "BackTracking",
  "problem": "Partition of a set intoK subsets with equal sum",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 272,
  "topic": "BackTracking",
  "problem": "Find the K-th Permutation Sequence of first N natural numbers",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},


{
  "sno.": 273,
  "topic": "Stacks & Queues",
  "problem": " Implement Stack from Scratch",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 274,
  "topic": "Stacks & Queues",
  "problem": " Implement Queue from Scratch",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 275,
  "topic": "Stacks & Queues",
  "problem": "Implement 2 stack in an array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 276,
  "topic": "Stacks & Queues",
  "problem": "find the middle element of a stack",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 277,
  "topic": "Stacks & Queues",
  "problem": "Implement \"N\" stacks in an Array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 278,
  "topic": "Stacks & Queues",
  "problem": "Check the expression has valid or Balanced parenthesis or not.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 279,
  "topic": "Stacks & Queues",
  "problem": "Reverse a String using Stack",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 280,
  "topic": "Stacks & Queues",
  "problem": "Design a Stack that supports getMin() in O(1) time and O(1) extra space.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 281,
  "topic": "Stacks & Queues",
  "problem": "Find the next Greater element",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 282,
  "topic": "Stacks & Queues",
  "problem": "The celebrity Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 283,
  "topic": "Stacks & Queues",
  "problem": "Arithmetic Expression evaluation",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 284,
  "topic": "Stacks & Queues",
  "problem": "Evaluation of Postfix expression",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 285,
  "topic": "Stacks & Queues",
  "problem": "Implement a method to insert an element at its bottom without using any other data structure.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 286,
  "topic": "Stacks & Queues",
  "problem": "Reverse a stack using recursion",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 287,
  "topic": "Stacks & Queues",
  "problem": "Sort a Stack using recursion",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 288,
  "topic": "Stacks & Queues",
  "problem": "Merge Overlapping Intervals",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 289,
  "topic": "Stacks & Queues",
  "problem": "Largest rectangular Area in Histogram",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 290,
  "topic": "Stacks & Queues",
  "problem": "Length of the Longest Valid Substring",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 291,
  "topic": "Stacks & Queues",
  "problem": "Expression contains redundant bracket or not",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 292,
  "topic": "Stacks & Queues",
  "problem": "Implement Stack using Queue",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 293,
  "topic": "Stacks & Queues",
  "problem": "Implement Stack using Deque",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 294,
  "topic": "Stacks & Queues",
  "problem": "Stack Permutations (Check if an array is stack permutation of other)",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 295,
  "topic": "Stacks & Queues",
  "problem": "Implement Queue using Stack  ",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 296,
  "topic": "Stacks & Queues",
  "problem": "Implement \"n\" queue in an array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 297,
  "topic": "Stacks & Queues",
  "problem": "Implement a Circular queue",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 298,
  "topic": "Stacks & Queues",
  "problem": "LRU Cache Implementationa",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 299,
  "topic": "Stacks & Queues",
  "problem": "Reverse a Queue using recursion",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 300,
  "topic": "Stacks & Queues",
  "problem": "Reverse the first “K” elements of a queue",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 301,
  "topic": "Stacks & Queues",
  "problem": "Interleave the first half of the queue with second half",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 302,
  "topic": "Stacks & Queues",
  "problem": "Find the first circular tour that visits all Petrol Pumps",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 303,
  "topic": "Stacks & Queues",
  "problem": "Minimum time required to rot all oranges",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 304,
  "topic": "Stacks & Queues",
  "problem": "Distance of nearest cell having 1 in a binary matrix",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 305,
  "topic": "Stacks & Queues",
  "problem": "First negative integer in every window of size “k”",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 306,
  "topic": "Stacks & Queues",
  "problem": "Check if all levels of two trees are anagrams or not.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 307,
  "topic": "Stacks & Queues",
  "problem": "Sum of minimum and maximum elements of all subarrays of size “k”.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 308,
  "topic": "Stacks & Queues",
  "problem": "Minimum sum of squares of character counts in a given string after removing “k” characters.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 309,
  "topic": "Stacks & Queues",
  "problem": "Queue based approach or first non-repeating character in a stream.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 310,
  "topic": "Stacks & Queues",
  "problem": "Next Smaller Element",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 311,
  "topic": "Heap",
  "problem": "Implement a Maxheap/MinHeap using arrays and recursion.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 312,
  "topic": "Heap",
  "problem": "Sort an Array using heap. (HeapSort)",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 313,
  "topic": "Heap",
  "problem": "Maximum of all subarrays of size k.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 314,
  "topic": "Heap",
  "problem": "“k” largest element in an array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 315,
  "topic": "Heap",
  "problem": "Kth smallest and largest element in an unsorted array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 316,
  "topic": "Heap",
  "problem": "Merge “K” sorted arrays. [ IMP ]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 317,
  "topic": "Heap",
  "problem": "Merge 2 Binary Max Heaps",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 318,
  "topic": "Heap",
  "problem": "Kth largest sum continuous subarrays",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 319,
  "topic": "Heap",
  "problem": "Leetcode- reorganize strings",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 320,
  "topic": "Heap",
  "problem": "Merge “K” Sorted Linked Lists [V.IMP]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 321,
  "topic": "Heap",
  "problem": "Smallest range in “K” Lists",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 322,
  "topic": "Heap",
  "problem": "Median in a stream of Integers",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 323,
  "topic": "Heap",
  "problem": "Check if a Binary Tree is Heap",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 324,
  "topic": "Heap",
  "problem": "Connect “n” ropes with minimum cost",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 325,
  "topic": "Heap",
  "problem": "Convert BST to Min Heap",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 326,
  "topic": "Heap",
  "problem": "Convert min heap to max heap",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 327,
  "topic": "Heap",
  "problem": "Rearrange characters in a string such that no two adjacent are same.",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 328,
  "topic": "Heap",
  "problem": "Minimum sum of two numbers formed from digits of an array",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 329,
  "topic": "Graph",
  "problem": "Create a Graph, print it",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 330,
  "topic": "Graph",
  "problem": "Implement BFS algorithm ",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 331,
  "topic": "Graph",
  "problem": "Implement DFS Algo ",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 332,
  "topic": "Graph",
  "problem": "Detect Cycle in Directed Graph using BFS/DFS Algo ",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 333,
  "topic": "Graph",
  "problem": "Detect Cycle in UnDirected Graph using BFS/DFS Algo ",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 334,
  "topic": "Graph",
  "problem": "Search in a Maze",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 335,
  "topic": "Graph",
  "problem": "Minimum Step by Knight",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 336,
  "topic": "Graph",
  "problem": "flood fill algo",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 337,
  "topic": "Graph",
  "problem": "Clone a graph",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 338,
  "topic": "Graph",
  "problem": "Making wired Connections",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 339,
  "topic": "Graph",
  "problem": "word Ladder ",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 340,
  "topic": "Graph",
  "problem": "Dijkstra algo",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 341,
  "topic": "Graph",
  "problem": "Implement Topological Sort ",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 342,
  "topic": "Graph",
  "problem": "Minimum time taken by each job to be completed given by a Directed Acyclic Graph",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 343,
  "topic": "Graph",
  "problem": "Find whether it is possible to finish all tasks or not from given dependencies",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 344,
  "topic": "Graph",
  "problem": "Find the no. of Isalnds",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 345,
  "topic": "Graph",
  "problem": "Given a sorted Dictionary of an Alien Language, find order of characters",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 346,
  "topic": "Graph",
  "problem": "Implement Kruksal’sAlgorithm",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 347,
  "topic": "Graph",
  "problem": "Implement Prim’s Algorithm",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 348,
  "topic": "Graph",
  "problem": "Total no. of Spanning tree in a graph",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 349,
  "topic": "Graph",
  "problem": "Implement Bellman Ford Algorithm",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 350,
  "topic": "Graph",
  "problem": "Implement Floyd warshallAlgorithm",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 351,
  "topic": "Graph",
  "problem": "Travelling Salesman Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 352,
  "topic": "Graph",
  "problem": "Graph ColouringProblem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 353,
  "topic": "Graph",
  "problem": "Snake and Ladders Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 354,
  "topic": "Graph",
  "problem": "Find bridge in a graph",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 355,
  "topic": "Graph",
  "problem": "Count Strongly connected Components(Kosaraju Algo)",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 356,
  "topic": "Graph",
  "problem": "Check whether a graph is Bipartite or Not",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 357,
  "topic": "Graph",
  "problem": "Detect Negative cycle in a graph",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 358,
  "topic": "Graph",
  "problem": "Longest path in a Directed Acyclic Graph",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 359,
  "topic": "Graph",
  "problem": "Journey to the Moon",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 360,
  "topic": "Graph",
  "problem": "Cheapest Flights Within K Stops",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 361,
  "topic": "Graph",
  "problem": "Oliver and the Game",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 362,
  "topic": "Graph",
  "problem": "Water Jug problem using BFS",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 363,
  "topic": "Graph",
  "problem": "Water Jug problem using BFS",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 364,
  "topic": "Graph",
  "problem": "Find if there is a path of more thank length from a source",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 365,
  "topic": "Graph",
  "problem": "M-ColouringProblem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 366,
  "topic": "Graph",
  "problem": "Minimum edges to reverse o make path from source to destination",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 367,
  "topic": "Graph",
  "problem": "Paths to travel each nodes using each edge(Seven Bridges)",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 368,
  "topic": "Graph",
  "problem": "Vertex Cover Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 369,
  "topic": "Graph",
  "problem": "Chinese Postman or Route Inspection",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 370,
  "topic": "Graph",
  "problem": "Number of Triangles in a Directed and Undirected Graph",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 371,
  "topic": "Graph",
  "problem": "Minimise the cashflow among a given set of friends who have borrowed money from each other",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 372,
  "topic": "Graph",
  "problem": "Two Clique Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},


{
  "sno.": 373,
  "topic": "Trie",
  "problem": "Construct a trie from scratch",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 374,
  "topic": "Trie",
  "problem": "Find shortest unique prefix for every word in a given list",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 375,
  "topic": "Trie",
  "problem": "Word Break Problem | (Trie solution)",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 376,
  "topic": "Trie",
  "problem": "Given a sequence of words, print all anagrams together",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 377,
  "topic": "Trie",
  "problem": "Implement a Phone Directory",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 378,
  "topic": "Trie",
  "problem": "Print unique rows in a given boolean matrix",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 379,
  "topic": "Dynamic Programming",
  "problem": "Coin ChangeProblem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 380,
  "topic": "Dynamic Programming",
  "problem": "Knapsack Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 381,
  "topic": "Dynamic Programming",
  "problem": "Binomial CoefficientProblem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 382,
  "topic": "Dynamic Programming",
  "problem": "Permutation CoefficientProblem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 383,
  "topic": "Dynamic Programming",
  "problem": "Program for nth Catalan Number",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 384,
  "topic": "Dynamic Programming",
  "problem": "Matrix Chain Multiplication ",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 385,
  "topic": "Dynamic Programming",
  "problem": "Edit Distance",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 386,
  "topic": "Dynamic Programming",
  "problem": "Subset Sum Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 387,
  "topic": "Dynamic Programming",
  "problem": "Friends Pairing Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 388,
  "topic": "Dynamic Programming",
  "problem": "Gold Mine Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 389,
  "topic": "Dynamic Programming",
  "problem": "Assembly Line SchedulingProblem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 390,
  "topic": "Dynamic Programming",
  "problem": "Painting the Fenceproblem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 391,
  "topic": "Dynamic Programming",
  "problem": "Maximize The Cut Segments",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 392,
  "topic": "Dynamic Programming",
  "problem": "Longest Common Subsequence",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 393,
  "topic": "Dynamic Programming",
  "problem": "Longest Repeated Subsequence",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 394,
  "topic": "Dynamic Programming",
  "problem": "Longest Increasing Subsequence",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 395,
  "topic": "Dynamic Programming",
  "problem": "Space Optimized Solution of LCS",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 396,
  "topic": "Dynamic Programming",
  "problem": "LCS (Longest Common Subsequence) of three strings",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 397,
  "topic": "Dynamic Programming",
  "problem": "Maximum Sum Increasing Subsequence",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 398,
  "topic": "Dynamic Programming",
  "problem": "Count all subsequences having product less than K",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 399,
  "topic": "Dynamic Programming",
  "problem": "Longest subsequence such that difference between adjacent is one",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 400,
  "topic": "Dynamic Programming",
  "problem": "Maximum subsequence sum such that no three are consecutive",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 401,
  "topic": "Dynamic Programming",
  "problem": "Egg Dropping Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 402,
  "topic": "Dynamic Programming",
  "problem": "Maximum Length Chain of Pairs",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 403,
  "topic": "Dynamic Programming",
  "problem": "Maximum size square sub-matrix with all 1s",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 404,
  "topic": "Dynamic Programming",
  "problem": "Maximum sum of pairs with specific difference",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 405,
  "topic": "Dynamic Programming",
  "problem": "Min Cost PathProblem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 406,
  "topic": "Dynamic Programming",
  "problem": "Maximum difference of zeros and ones in binary string",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 407,
  "topic": "Dynamic Programming",
  "problem": "Minimum number of jumps to reach end",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 408,
  "topic": "Dynamic Programming",
  "problem": "Minimum cost to fill given weight in a bag",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 409,
  "topic": "Dynamic Programming",
  "problem": "Minimum removals from array to make max –min <= K",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 410,
  "topic": "Dynamic Programming",
  "problem": "Longest Common Substring",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 411,
  "topic": "Dynamic Programming",
  "problem": "Count number of ways to reacha given score in a game",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 412,
  "topic": "Dynamic Programming",
  "problem": "Count Balanced Binary Trees of Height h",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 413,
  "topic": "Dynamic Programming",
  "problem": "LargestSum Contiguous Subarray [V>V>V>V IMP ]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 414,
  "topic": "Dynamic Programming",
  "problem": "Smallest sum contiguous subarray",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 415,
  "topic": "Dynamic Programming",
  "problem": "Unbounded Knapsack (Repetition of items allowed)",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 416,
  "topic": "Dynamic Programming",
  "problem": "Word Break Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 417,
  "topic": "Dynamic Programming",
  "problem": "Largest Independent Set Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 418,
  "topic": "Dynamic Programming",
  "problem": "Partition problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 419,
  "topic": "Dynamic Programming",
  "problem": "Longest Palindromic Subsequence",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 420,
  "topic": "Dynamic Programming",
  "problem": "Count All Palindromic Subsequence in a given String",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 421,
  "topic": "Dynamic Programming",
  "problem": "Longest Palindromic Substring",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 422,
  "topic": "Dynamic Programming",
  "problem": "Longest alternating subsequence",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 423,
  "topic": "Dynamic Programming",
  "problem": "Weighted Job Scheduling",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 424,
  "topic": "Dynamic Programming",
  "problem": "Coin game winner where every player has three choices",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 425,
  "topic": "Dynamic Programming",
  "problem": "Count Derangements (Permutation such that no element appears in its original position) [ IMPORTANT ]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 426,
  "topic": "Dynamic Programming",
  "problem": "Maximum profit by buying and selling a share at most twice [ IMP ]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 427,
  "topic": "Dynamic Programming",
  "problem": "Optimal Strategy for a Game",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 428,
  "topic": "Dynamic Programming",
  "problem": "Optimal Binary Search Tree",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 429,
  "topic": "Dynamic Programming",
  "problem": "Palindrome PartitioningProblem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 430,
  "topic": "Dynamic Programming",
  "problem": "Word Wrap Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 431,
  "topic": "Dynamic Programming",
  "problem": "Mobile Numeric Keypad Problem [ IMP ]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 432,
  "topic": "Dynamic Programming",
  "problem": "Boolean Parenthesization Problem",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 433,
  "topic": "Dynamic Programming",
  "problem": "Largest rectangular sub-matrix whose sum is 0",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 434,
  "topic": "Dynamic Programming",
  "problem": "Largest area rectangular sub-matrix with equal number of 1’s and 0’s [ IMP ]",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 435,
  "topic": "Dynamic Programming",
  "problem": "Maximum sum rectangle in a 2D matrix",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 436,
  "topic": "Dynamic Programming",
  "problem": "Maximum profit by buying and selling a share at most k times",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 437,
  "topic": "Dynamic Programming",
  "problem": "Find if a string is interleaved of two other strings",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 438,
  "topic": "Dynamic Programming",
  "problem": "Maximum Length of Pair Chain",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},


{
  "sno.": 439,
  "topic": "Bit Manipulation",
  "problem": "Count set bits in an integer",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 440,
  "topic": "Bit Manipulation",
  "problem": "Find the two non-repeating elements in an array of repeating elements",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 441,
  "topic": "Bit Manipulation",
  "problem": "Count number of bits to be flipped to convert A to B",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 442,
  "topic": "Bit Manipulation",
  "problem": "Count total set bits in all numbers from 1 to n",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 443,
  "topic": "Bit Manipulation",
  "problem": "Program to find whether a no is power of two",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 444,
  "topic": "Bit Manipulation",
  "problem": "Find position of the only set bit",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 445,
  "topic": "Bit Manipulation",
  "problem": "Copy set bits in a range",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 446,
  "topic": "Bit Manipulation",
  "problem": "Divide two integers without using multiplication, division and mod operator",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 447,
  "topic": "Bit Manipulation",
  "problem": "Calculate square of a number without using *, / and pow()",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
},
{
  "sno.": 448,
  "topic": "Bit Manipulation",
  "problem": "Power Set",
    "difficulty": "",
  "tags": [],
  "createdAt": "",
  "isSolved": false,
  "solvedBy": ""
}]